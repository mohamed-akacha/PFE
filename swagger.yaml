openapi: 3.0.0
paths:
    /: {get: {operationId: getHello, parameters: [], responses: {'200': {description: ""}}}}
    /users: {get: {operationId: findAll, summary: 'Liste de tous les utilisateur, saufs les soft deleted', parameters: [], responses: {'200': {description: ""}}, tags: [Users], security: [{bearer: []}]}}
    '/users/{id}': {get: {operationId: findById, summary: 'Trouver un utilisateur par son ID', parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Users], security: [{bearer: []}]}, put: {operationId: updateUser, summary: 'Modifier un utilisateur', parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateUserDto'}}}}, responses: {'200': {description: ""}}, tags: [Users], security: [{bearer: []}]}, delete: {operationId: deleteUser, summary: 'Suppression définitive d''un utilisateur', parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Users], security: [{bearer: []}]}}
    '/users/softdelete/{id}': {patch: {operationId: softDeleteUser, summary: 'Désactiver un utilisateur, (soft delete)', parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Users], security: [{bearer: []}]}}
    '/users/restore/{id}': {patch: {operationId: restoreUser, summary: 'Activer un utilisateur', parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Users], security: [{bearer: []}]}}
    /auth/register: {post: {operationId: createUser, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UserRSubscribeDto'}}}}, responses: {'201': {description: ""}}, tags: [Auth], security: [{bearer: []}]}}
    /auth/login: {post: {operationId: login, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/LoginCredentialsDto'}}}}, responses: {'201': {description: ""}}, tags: [Auth], security: [{bearer: []}]}}
    '/auth/{id}': {put: {operationId: confirmAccount, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateUserDto'}}}}, responses: {'200': {description: ""}}, tags: [Auth], security: [{bearer: []}]}}
    '/auth/confirm/{hashed}': {get: {operationId: getConfirm, parameters: [{name: hashed, required: true, in: path, schema: {type: string}}], responses: {'200': {description: ""}}, tags: [Auth], security: [{bearer: []}]}}
    /inspections: {post: {operationId: createInspection, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/AddInspectionDto'}}}}, responses: {'201': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}, get: {operationId: getAllInspections, parameters: [], responses: {'200': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}}
    '/inspections/{id}': {get: {operationId: getInspectionById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}, put: {operationId: updateInspectionByAdmin, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateInspectionDto'}}}}, responses: {'200': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}, delete: {operationId: softDeleteInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}}
    '/inspections/evaluate/{id}': {patch: {operationId: evaluateInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}}
    '/inspections/restore/{id}': {put: {operationId: restoreInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}}
    '/inspections/force/{id}': {delete: {operationId: deleteInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections], security: [{bearer: []}]}}
    /inspection-units: {post: {operationId: createInspectionUnit, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/CreateInspectionUnitDto'}}}}, responses: {'201': {description: ""}}, tags: [inspection-unit], security: [{bearer: []}]}, get: {operationId: getAllInspectionUnits, parameters: [], responses: {'200': {description: ""}}, tags: [inspection-unit], security: [{bearer: []}]}}
    '/inspection-units/{id}': {get: {operationId: getInspectionUnitById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [inspection-unit], security: [{bearer: []}]}, patch: {operationId: updateInspectionUnit, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateInspectionUnitDto'}}}}, responses: {'200': {description: ""}}, tags: [inspection-unit], security: [{bearer: []}]}, delete: {operationId: softDeleteInspectionUnit, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [inspection-unit], security: [{bearer: []}]}}
    '/inspection-units/restore/{id}': {patch: {operationId: restoreInspectionUnit, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [inspection-unit], security: [{bearer: []}]}}
    /evaluation-points: {post: {operationId: createEvaluationPoint, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/AddEvaluationPointDto'}}}}, responses: {'201': {description: ""}}, tags: ['Points d''evaluation'], security: [{bearer: []}]}, get: {operationId: getAllEvaluationPoints, parameters: [], responses: {'200': {description: ""}}, tags: ['Points d''evaluation'], security: [{bearer: []}]}}
    '/evaluation-points/{id}': {get: {operationId: getEvaluationPointById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation'], security: [{bearer: []}]}, put: {operationId: updateEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateEvaluationPointDto'}}}}, responses: {'200': {description: ""}}, tags: ['Points d''evaluation'], security: [{bearer: []}]}, delete: {operationId: softDeleteEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation'], security: [{bearer: []}]}}
    '/evaluation-points/restore/{id}': {put: {operationId: restoreEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation'], security: [{bearer: []}]}}
    '/evaluation-points/force/{id}': {delete: {operationId: deleteEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation'], security: [{bearer: []}]}}
    '/evaluations/{inspectionId}': {get: {operationId: getEvaluationData, parameters: [{name: inspectionId, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Evaluations], security: [{bearer: []}]}, post: {operationId: saveEvaluation, parameters: [{name: inspectionId, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {type: array, items: {type: string}}}}}, responses: {'201': {description: ""}}, tags: [Evaluations], security: [{bearer: []}]}}
    /blocs: {post: {operationId: createBloc, summary: 'Création d''un bloc', parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/CreateBlocDto'}}}}, responses: {'201': {description: ""}}, tags: [block], security: [{bearer: []}]}, get: {operationId: getAllBlocs, summary: 'Récupérer tous les blocs', parameters: [], responses: {'200': {description: ""}}, tags: [block], security: [{bearer: []}]}}
    '/blocs/{id}': {get: {operationId: getOneById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [block], security: [{bearer: []}]}, patch: {operationId: updateBloc, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateBlocDto'}}}}, responses: {'200': {description: ""}}, tags: [block], security: [{bearer: []}]}, delete: {operationId: softDeleteBloc, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [block], security: [{bearer: []}]}}
    '/blocs/units/{unitId}': {get: {operationId: getBlocksByUnit, parameters: [{name: unitId, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [block], security: [{bearer: []}]}}
    '/blocs/restore/{id}': {patch: {operationId: restoreBloc, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [block], security: [{bearer: []}]}}
    '/blocs/force/{id}': {delete: {operationId: deleteBloc, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [block], security: [{bearer: []}]}}
    /institutions: {post: {operationId: createInstitution, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/CreateInstitutionDto'}}}}, responses: {'201': {description: ""}}, tags: [institutions], security: [{bearer: []}]}, get: {operationId: getAllInstitutions, parameters: [], responses: {'200': {description: ""}}, tags: [institutions], security: [{bearer: []}]}}
    '/institutions/{id}': {get: {operationId: getInstitutionById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [institutions], security: [{bearer: []}]}, patch: {operationId: updateInstitution, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateInstitutionDto'}}}}, responses: {'200': {description: ""}}, tags: [institutions], security: [{bearer: []}]}, delete: {operationId: softDeleteInstitution, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [institutions], security: [{bearer: []}]}}
    '/institutions/restore/{id}': {patch: {operationId: restoreInstitution, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [institutions], security: [{bearer: []}]}}
    '/institutions/force/{id}': {delete: {operationId: deleteInstitution, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [institutions], security: [{bearer: []}]}}
    /zones: {post: {operationId: createZone, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/CreateZoneDto'}}}}, responses: {'201': {description: ""}}, tags: [zones], security: [{bearer: []}]}, get: {operationId: getAllZones, parameters: [], responses: {'200': {description: ""}}, tags: [zones], security: [{bearer: []}]}}
    '/zones/{id}': {get: {operationId: getZoneById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [zones], security: [{bearer: []}]}, patch: {operationId: updateZone, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateZoneDto'}}}}, responses: {'200': {description: ""}}, tags: [zones], security: [{bearer: []}]}, delete: {operationId: softDeleteZone, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [zones], security: [{bearer: []}]}}
    '/zones/restore/{id}': {patch: {operationId: restoreZone, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [zones], security: [{bearer: []}]}}
    '/zones/force/{id}': {delete: {operationId: deleteZone, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [zones], security: [{bearer: []}]}}
info:
    title: Inspections
    description: 'The inspection API description'
    version: '1.0'
    contact: {}
tags:
    - {name: inspections, description: ""}
servers: []
components:
    securitySchemes: {bearer: {scheme: bearer, bearerFormat: JWT, type: http}}
    schemas: {UpdateUserDto: {type: object, properties: {username: {type: string, description: 'The updated username of the user', minLength: 4, maxLength: 20, example: john_doe}, email: {type: string, description: 'The updated email address of the user', format: email, example: john.doe@example.com}, password: {type: string, description: 'The updated password of the user', minLength: 8, maxLength: 20, example: Abcd1234!}, oldpassword: {type: string, description: 'The updated password of the user', minLength: 8, maxLength: 20, example: Abcd1234!}, tel: {type: string, description: 'The updated telephone number of the user', minLength: 10, maxLength: 20, example: +1-541-754-3010}, role: {type: string, description: 'The role of the user', enum: [admin, user], example: admin}}}, UserRSubscribeDto: {type: object, properties: {email: {type: string, description: 'The email address of the user', format: email, example: john.doe@example.com}, role: {type: string, description: 'The role of the user', enum: [admin, user], example: admin}}}, LoginCredentialsDto: {type: object, properties: {email: {type: string, description: 'The email of the user', format: email, minLength: 5, maxLength: 255, example: user@example.com}, password: {type: string, description: 'The password of the user', minLength: 8, maxLength: 20, example: password123}}, required: [email, password]}, AddInspectionDto: {type: object, properties: {description: {type: string, description: 'La description de l''inspection', example: 'Vérification de l''état de la chaudière'}, datePrevue: {format: date-time, type: string, description: 'La date prévue de l''inspection', example: '2023-04-01'}, type: {type: string, description: 'Le type d''inspection', enum: [interne, externe]}, inspecteurId: {type: number, description: 'L''identifiant de l''inspecteur en charge de l''inspection', example: 1}, unitId: {type: number, description: 'L''identifiant de l''unité à inspecter', example: 2}}, required: [description, datePrevue, type]}, UpdateInspectionDto: {type: object, properties: {description: {type: string, description: 'Description de l''inspection', example: 'Inspection de sécurité mensuelle'}, datePrevue: {format: date-time, type: string, description: 'Date prévue de l''inspection', example: '2023-04-01'}, type: {type: string, description: 'Type d''inspection', enum: [interne, externe], example: externe}, inspecteurId: {type: number, description: 'Identifiant de l''inspecteur en charge de l''inspection', example: 1}, unitId: {type: number, description: 'Identifiant de l''unité inspectée', example: 2}}}, CreateInspectionUnitDto: {type: object, properties: {nom: {type: string, example: 'Nom de l''unité d''inspection', description: 'Le nom de l''unité d''inspection'}, code: {type: string, example: 'Code de l''unité d''inspection', description: 'Le code de l''unité d''inspection'}, institutionId: {type: number, example: '1', description: 'L''ID de l''institution à laquelle l''unité d''inspection appartient'}}, required: [nom, code, institutionId]}, UpdateInspectionUnitDto: {type: object, properties: {nom: {type: string, example: 'Nouveau nom de l''unité d''inspection', description: 'Le nouveau nom de l''unité d''inspection'}, code: {type: string, example: 'Nouveau code de l''unité d''inspection', description: 'Le nouveau code de l''unité d''inspection'}, institutionId: {type: number, example: '2', description: 'Le nouvel ID de l''institution à laquelle l''unité d''inspection appartient'}}, required: [nom, code, institutionId]}, AddEvaluationPointDto: {type: object, properties: {description: {type: string, description: 'La description de l''évaluation', example: 'Vérifier si la pièce est bien fixée'}, type: {type: string, description: 'Le type d''inspection pour lequel cette évaluation est destinée', enum: [interne, externe], example: interne}}, required: [description, type]}, UpdateEvaluationPointDto: {type: object, properties: {description: {type: string, description: 'La description de l''évaluation point à mettre à jour', example: 'Nouvelle description de l''évaluation point'}, type: {type: string, description: 'Le type de l''inspection associé à l''évaluation point', example: externe}}, required: [description, type]}, CreateBlocDto: {type: object, properties: {code: {type: string, example: B01, description: 'Code du bloc'}, nom: {type: string, example: 'Bloc A', description: 'Nom du bloc'}, etage: {type: number, example: 1, description: 'Numéro d''étage du bloc', minimum: 0}, inspectionUnitId: {type: number, example: 1, description: 'Identifiant de l''unité d''inspection associée au bloc'}}, required: [code, nom, etage, inspectionUnitId]}, UpdateBlocDto: {type: object, properties: {code: {type: string, example: B01, description: 'Le code du bloc. Doit être une chaîne de caractères.'}, nom: {type: string, example: 'Bloc A', description: 'Le nom du bloc. Doit être une chaîne de caractères.'}, etage: {type: number, example: 1, description: 'L''étage du bloc. Doit être un nombre entier supérieur ou égal à zéro.', minimum: 0}, inspectionUnitId: {type: number, example: 1, description: 'L''identifiant de l''unité d''inspection du bloc. Doit être un nombre entier.'}}}, CreateInstitutionDto: {type: object, properties: {nom: {type: string, description: 'Le nom de l''institution', example: 'Université de Paris'}, adresse: {type: string, description: 'L''adresse de l''institution', example: '5 Rue de l''Université, 75007 Paris, France'}, nature: {type: string, description: 'La nature de l''institution', example: 'hôpital '}, zoneId: {type: number, example: '1', description: 'L''ID de la zone  à laquelle l''institution appartient'}}, required: [nom, adresse, nature, zoneId]}, UpdateInstitutionDto: {type: object, properties: {nom: {type: string, description: 'Nom de l''institution', example: 'Université de Paris'}, adresse: {type: string, description: 'Adresse de l''institution', example: '5 Rue Thomas Mann, 75013 Paris'}, nature: {type: string, description: 'Nature de l''institution', example: hôpital}}}, CreateZoneDto: {type: object, properties: {nom: {type: string, description: 'Le nom de la zone géographique', example: sfax}}, required: [nom]}, UpdateZoneDto: {type: object, properties: {nom: {type: string, description: 'Nom de la zone', example: sfax}}}}
