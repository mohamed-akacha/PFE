openapi: 3.0.0
paths:
    /: {get: {operationId: getHello, parameters: [], responses: {'200': {description: ""}}}}
    /auth/register: {post: {operationId: createUser, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UserSubscribeDto'}}}}, responses: {'201': {description: ""}}, tags: [Users/auth]}}
    '/auth/{id}': {put: {operationId: updateUser, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateUserDto'}}}}, responses: {'200': {description: ""}}, tags: [Users/auth]}, delete: {operationId: softDeleteUser, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Users/auth]}}
    '/auth/confirm/{hashed}': {get: {operationId: getConfirm, parameters: [{name: hashed, required: true, in: path, schema: {type: string}}], responses: {'200': {description: ""}}, tags: [Users/auth]}}
    /auth/login: {post: {operationId: login, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/LoginCredentialsDto'}}}}, responses: {'201': {description: ""}}, tags: [Users/auth]}}
    /auth/all: {get: {operationId: findAll, parameters: [], responses: {'200': {description: ""}}, tags: [Users/auth]}}
    '/auth/restore/{id}': {patch: {operationId: restoreUser, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Users/auth]}}
    '/auth/force/{id}': {delete: {operationId: deleteUser, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Users/auth]}}
    /inspections: {post: {operationId: createInspection, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/AddInspectionDto'}}}}, responses: {'201': {description: ""}}, tags: [Inspections]}, get: {operationId: getAllInspections, parameters: [], responses: {'200': {description: ""}}, tags: [Inspections]}}
    '/inspections/{id}': {get: {operationId: getInspectionById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections]}, put: {operationId: updateInspectionByAdmin, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateInspectionDto'}}}}, responses: {'200': {description: ""}}, tags: [Inspections]}, delete: {operationId: softDeleteInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections]}}
    '/inspections/evaluate/{id}': {patch: {operationId: evaluateInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections]}}
    '/inspections/restore/{id}': {put: {operationId: restoreInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections]}}
    '/inspections/force/{id}': {delete: {operationId: deleteInspection, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Inspections]}}
    /evaluation-points: {post: {operationId: createEvaluationPoint, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/AddEvaluationPointDto'}}}}, responses: {'201': {description: ""}}, tags: ['Points d''evaluation']}, get: {operationId: getAllEvaluationPoints, parameters: [], responses: {'200': {description: ""}}, tags: ['Points d''evaluation']}}
    '/evaluation-points/{id}': {get: {operationId: getEvaluationPointById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation']}, put: {operationId: updateEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateEvaluationPointDto'}}}}, responses: {'200': {description: ""}}, tags: ['Points d''evaluation']}, delete: {operationId: softDeleteEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation']}}
    '/evaluation-points/restore/{id}': {put: {operationId: restoreEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation']}}
    '/evaluation-points/force/{id}': {delete: {operationId: deleteEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: ['Points d''evaluation']}}
    '/evaluations/{inspectionId}': {get: {operationId: getEvaluationData, parameters: [{name: inspectionId, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Evaluations]}, post: {operationId: saveEvaluation, parameters: [{name: inspectionId, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {type: array, items: {type: string}}}}}, responses: {'201': {description: ""}}, tags: [Evaluations]}}
    /blocs: {post: {operationId: createBloc, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/CreateBlocDto'}}}}, responses: {'201': {description: ""}}, tags: [Blocs]}, get: {operationId: getAllBlocs, parameters: [], responses: {'200': {description: ""}}, tags: [Blocs]}}
    '/blocs/{id}': {get: {operationId: getOneById, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Blocs]}, patch: {operationId: updateBloc, parameters: [{name: id, required: true, in: path, schema: {type: number}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateBlocDto'}}}}, responses: {'200': {description: ""}}, tags: [Blocs]}, delete: {operationId: softDeleteBloc, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Blocs]}}
    '/blocs/units/{unitId}': {get: {operationId: getBlocksByUnit, parameters: [{name: unitId, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Blocs]}}
    '/blocs/restore/{id}': {patch: {operationId: restoreBloc, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Blocs]}}
    '/blocs/force/{id}': {delete: {operationId: deleteEvaluationPoint, parameters: [{name: id, required: true, in: path, schema: {type: number}}], responses: {'200': {description: ""}}, tags: [Blocs]}}
    /institution: {post: {operationId: create, parameters: [], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/CreateInstitutionDto'}}}}, responses: {'201': {description: ""}}, tags: [Institutions]}, get: {operationId: findAll, parameters: [], responses: {'200': {description: ""}}, tags: [Institutions]}}
    '/institution/{id}': {get: {operationId: findOne, parameters: [{name: id, required: true, in: path, schema: {type: string}}], responses: {'200': {description: ""}}, tags: [Institutions]}, patch: {operationId: update, parameters: [{name: id, required: true, in: path, schema: {type: string}}], requestBody: {required: true, content: {application/json: {schema: {$ref: '#/components/schemas/UpdateInstitutionDto'}}}}, responses: {'200': {description: ""}}, tags: [Institutions]}, delete: {operationId: remove, parameters: [{name: id, required: true, in: path, schema: {type: string}}], responses: {'200': {description: ""}}, tags: [Institutions]}}
info:
    title: Inspections
    description: 'The inspection API description'
    version: '1.0'
    contact: {}
tags:
    - {name: inspections, description: ""}
servers: []
components:
    schemas: {UserSubscribeDto: {type: object, properties: {username: {type: string, description: 'The username of the user', minLength: 4, maxLength: 20, example: john_doe}, email: {type: string, description: 'The email address of the user', format: email, example: john.doe@example.com}, tel: {type: string, description: 'The telephone number of the user', minLength: 10, maxLength: 20, example: +1-541-754-3010}, role: {type: string, description: 'The role of the user', enum: [admin, user], example: admin}, password: {type: string, description: 'The password of the user', minLength: 8, maxLength: 20, example: Abcd1234!}}}, UpdateUserDto: {type: object, properties: {username: {type: string, description: 'The updated username of the user', minLength: 4, maxLength: 20, example: john_doe}, email: {type: string, description: 'The updated email address of the user', format: email, example: john.doe@example.com}, password: {type: string, description: 'The updated password of the user', minLength: 8, maxLength: 20, example: Abcd1234!}, oldpassword: {type: string, description: 'The updated password of the user', minLength: 8, maxLength: 20, example: Abcd1234!}, tel: {type: string, description: 'The updated telephone number of the user', minLength: 10, maxLength: 20, example: +1-541-754-3010}, role: {type: string, description: 'The role of the user', enum: [admin, user], example: admin}}}, LoginCredentialsDto: {type: object, properties: {}}, AddInspectionDto: {type: object, properties: {}}, UpdateInspectionDto: {type: object, properties: {}}, AddEvaluationPointDto: {type: object, properties: {}}, UpdateEvaluationPointDto: {type: object, properties: {}}, CreateBlocDto: {type: object, properties: {}}, UpdateBlocDto: {type: object, properties: {}}, CreateInstitutionDto: {type: object, properties: {}}, UpdateInstitutionDto: {type: object, properties: {}}}
